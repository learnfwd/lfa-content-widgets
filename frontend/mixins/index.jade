mixin gallery()
  .gallery
    - var arg = arguments
    - for (var i = 0; i < arg.length; i++) {
      - if (typeof(arg[i]) === 'string') {
          a(href=arg[i], data-lightbox="Album")
            - if (i === 0) {
                img(src=arg[0])
            - }
      - } else {
        - if (typeof(arg[i]) === 'object') {
          - var title = arg[i].title ? arg[i].title : ' ';
          a(href=arg[i].src, data-lightbox="Album", data-title=title)
            - if (i === 0) {
              - if (arg[0].tn) {
                  img(src=arg[0].tn)
              - } else {
                  img(src=arg[0].src)
              - }
            - }
        - } else {
            - throw new Error('invalid argumets for Lightbox widget.', arguments)
        - }
      - }
    - }

mixin kenburns() 
  - var arg = arguments;

  - var imageLinks = [];
  - var titleLinks = [];
  
  - for (var i = 0; i < arg.length; i++) {
    - if (typeof arg[i] === 'string') {
      - imageLinks.push(arg[i]);
      - titleLinks.push(null);
    - }
    - else {
      - if (typeof arg[i] === 'object' && arg[i]) {
        - imageLinks.push(arg[i].src);
        - titleLinks[i] = arg[i].title;
      - } else {
        - throw new Error('invalid arguments for Ken Burns widget.', arguments)
      - }
    - }
  - }
  - imageLinks = JSON.stringify(imageLinks);
  - titleLinks = JSON.stringify(titleLinks);

  .gallery-kenburns(
    data-imagelinks="#{imageLinks}",
    data-titlelinks="#{titleLinks}"
  )
    .kenburns-slideshow
    .kenburns-description
      .slide-title

mixin tooltip() 
  .tooltip-wrapper
    if (block)
      .img-wrapper
        block
    - var arg = arguments;
    - for (var i = 0; i < arg.length; i++) {
      - var cssToLoad = {};
      - var style = [];
      - arg[i].top ? cssToLoad.top = arg[i].top : '';
      - arg[i].bottom ? cssToLoad.bottom = arg[i].bottom : '';
      - arg[i].left ? cssToLoad.left = arg[i].left : '';
      - arg[i].right ? cssToLoad.right = arg[i].right : '';
      - for (entry in cssToLoad) {
          - style.push(entry + ':' + cssToLoad[entry]);
      - };
      - style.push('-webkit-transform:translate(-' + ((cssToLoad.top) || (cssToLoad.bottom)) + ',-' + ((cssToLoad.left) || (cssToLoad.right)) + ')');
      
      span.tooltip-trigger(  
        class = 'tooltip-trigger-' + i,  
        role = 'button', 
        data-toggle = 'popover', 
        data-html = true,
        data-template = arg[i].template ? arg[i].template : '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>',
        data-trigger = arg[i].trigger ? arg[i].trigger : 'click', 
        data-placement = arg[i].placement ? arg[i].placement : 'auto',
        title = arg[i].title ? arg[i].title : 'Title is missing!', 
        data-content = arg[i].content ? arg[i].content : 'Content is missing!',
        data-container = 'body',
        style = style.join(';')
      )
        - var symbol = arg[i].symbol || 'cricle-o'
        i.fa(class ='fa-' + symbol, class= arg[i].large ? 'fa-2x' : 'normal')
    - };
      
mixin hchart(options)
  - var maxStep = options.maxSteps || 100
  .hchart
    each bar in options.bars
      .row
        .col-sm-3= bar.name
        .col-sm-9
          if (bar.stacked) 
            
            .hchart-row
              .progress
                - for (var i = 0; i < bar.data.length; i+=2) {
                .progress-bar(role="progressbar", data-transitiongoal="#{((bar.data[i]* 100) / maxStep)}", style="background: #{bar.data[i+1]}")= bar.data[i]
                - }
          else
            
            .hchart-row
              - for (var i = 0; i < bar.data.length; i+=2) {
                .progress(style="margin-bottom: 0.1em")
                  .progress-bar(role="progressbar", data-transitiongoal="#{((bar.data[i]* 100) / maxStep)}", style="background: #{bar.data[i+1]}")= bar.data[i]
              - }
    .row: .col-sm-9.col-sm-offset-3
      if (options.step)
        .hchart-step(style="position:relative; height: 3em")
          - var steps = options.step
          - for (var i = 0; i <= maxStep; i+=steps) {
            .step(style="position: absolute; left: #{((i * 100) / maxStep)}%; text-align: center"): .small
              div(style="text-align: center") |
              div #{i}
          - }
      if (options.legend)
        .hchart-legend: .text-center
            each item in options.legend
              .legend(style="width: 10px; height: 10px; background: #{item.color}; display: inline-block")
              span(style="margin-left: 0.2em; margin-right: 1em")= item.name

mixin vchart(options)
  - var height = options.height || '200px';
  - var width = options.width || '40px';
  - var maxStep = options.maxSteps || 100;
  .vchart(style="position: relative; margin: 2em 0")
    .row-fluid
      each bar, index in options.bars
        .col-sm-6(style="margin: 2em 0")
          if (options.step)
            if (index % 2 == 0)
              .hidden-xs(style="height: #{height}; width: 2em; position: absolute; top: 0; display: inline-block")
                - var steps = options.step
                - for (var i = 0; i <= maxStep; i+=steps) {
                  .step(style="width: 100%; position: absolute; bottom: #{((i * 100) / maxStep)}%; border-bottom: 1px solid black;") 
                    div #{i} 
                - }
          .vchart-section(style="height: #{height}; display: inline-block;margin-left: 2em;margin-bottom: 2em;")
            if (options.step)
              .vchart-step(style="height: 100%; width: 2em; position: relative;")
                - var steps = options.step
                - for (var i = 0; i <= maxStep; i+=steps) {
                  .step(style="width: 100%; position: absolute; bottom: #{((i * 100) / maxStep)}%; border-bottom: 1px solid black;") #{i} 
                - }
            .vchart-chart(style="height: 100%; display: inline-block;")
              - for (var i = 0; i < bar.data.length; i+=2) {
                .progress.vertical.bottom(style="margin: 0 0.1em; width: #{width}")
                  .progress-bar(role="progressbar", data-transitiongoal="#{((bar.data[i]* 100) / maxStep)}", style="background: #{bar.data[i+1]}")= bar.data[i]
              - }
          .text-center.small= bar.name
          hr.visible-xs
    if (options.legend)
      .row: .col-sm-9.col-sm-offset-3
        .vchart-legend: .text-center
          each item in options.legend
            .legend(style="width: 10px; height: 10px; background: #{item.color}; display: inline-block")
            span(style="margin-left: 0.2em; margin-right: 1em")= item.name
